// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Laplace_approx_vcov
Eigen::MatrixXd Laplace_approx_vcov(int n_samples, Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int n_choice_set);
RcppExport SEXP _PanelMixedDesign_Laplace_approx_vcov(SEXP n_samplesSEXP, SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP n_choice_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice_set(n_choice_setSEXP);
    rcpp_result_gen = Rcpp::wrap(Laplace_approx_vcov(n_samples, X, b_mean, var_vec, n_choice_set));
    return rcpp_result_gen;
END_RCPP
}
// MSM_approx_vcov
Eigen::MatrixXd MSM_approx_vcov(int n_samples, Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int n_choice_set);
RcppExport SEXP _PanelMixedDesign_MSM_approx_vcov(SEXP n_samplesSEXP, SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP n_choice_setSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice_set(n_choice_setSEXP);
    rcpp_result_gen = Rcpp::wrap(MSM_approx_vcov(n_samples, X, b_mean, var_vec, n_choice_set));
    return rcpp_result_gen;
END_RCPP
}
// PQL_approx_vcov
Eigen::MatrixXd PQL_approx_vcov(int n_samples, Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int nChoiceSet);
RcppExport SEXP _PanelMixedDesign_PQL_approx_vcov(SEXP n_samplesSEXP, SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP nChoiceSetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n_samples(n_samplesSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type nChoiceSet(nChoiceSetSEXP);
    rcpp_result_gen = Rcpp::wrap(PQL_approx_vcov(n_samples, X, b_mean, var_vec, nChoiceSet));
    return rcpp_result_gen;
END_RCPP
}
// normalize_probabilities
Eigen::VectorXd normalize_probabilities(Eigen::VectorXd probs, int n_choice);
RcppExport SEXP _PanelMixedDesign_normalize_probabilities(SEXP probsSEXP, SEXP n_choiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice(n_choiceSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_probabilities(probs, n_choice));
    return rcpp_result_gen;
END_RCPP
}
// impsamp_calc_info_given_Y
Eigen::MatrixXd impsamp_calc_info_given_Y(Eigen::VectorXd Y, Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int n_choice_set, int n_samples_u, bool return_unweighted, Eigen::VectorXd& marginal_prob_store);
RcppExport SEXP _PanelMixedDesign_impsamp_calc_info_given_Y(SEXP YSEXP, SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP n_choice_setSEXP, SEXP n_samples_uSEXP, SEXP return_unweightedSEXP, SEXP marginal_prob_storeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice_set(n_choice_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples_u(n_samples_uSEXP);
    Rcpp::traits::input_parameter< bool >::type return_unweighted(return_unweightedSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type marginal_prob_store(marginal_prob_storeSEXP);
    rcpp_result_gen = Rcpp::wrap(impsamp_calc_info_given_Y(Y, X, b_mean, var_vec, n_choice_set, n_samples_u, return_unweighted, marginal_prob_store));
    return rcpp_result_gen;
END_RCPP
}
// importance_sample_all_Y
Eigen::MatrixXd importance_sample_all_Y(Eigen::MatrixXd Y, Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int n_choice_set, int n_samples_u);
RcppExport SEXP _PanelMixedDesign_importance_sample_all_Y(SEXP YSEXP, SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP n_choice_setSEXP, SEXP n_samples_uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice_set(n_choice_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples_u(n_samples_uSEXP);
    rcpp_result_gen = Rcpp::wrap(importance_sample_all_Y(Y, X, b_mean, var_vec, n_choice_set, n_samples_u));
    return rcpp_result_gen;
END_RCPP
}
// importance_sample_random_Y
Eigen::MatrixXd importance_sample_random_Y(Eigen::MatrixXd X, Eigen::VectorXd b_mean, Eigen::VectorXd var_vec, int n_choice_set, int n_samples_u, int n_samples_Y);
RcppExport SEXP _PanelMixedDesign_importance_sample_random_Y(SEXP XSEXP, SEXP b_meanSEXP, SEXP var_vecSEXP, SEXP n_choice_setSEXP, SEXP n_samples_uSEXP, SEXP n_samples_YSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b_mean(b_meanSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type var_vec(var_vecSEXP);
    Rcpp::traits::input_parameter< int >::type n_choice_set(n_choice_setSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples_u(n_samples_uSEXP);
    Rcpp::traits::input_parameter< int >::type n_samples_Y(n_samples_YSEXP);
    rcpp_result_gen = Rcpp::wrap(importance_sample_random_Y(X, b_mean, var_vec, n_choice_set, n_samples_u, n_samples_Y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_PanelMixedDesign_Laplace_approx_vcov", (DL_FUNC) &_PanelMixedDesign_Laplace_approx_vcov, 5},
    {"_PanelMixedDesign_MSM_approx_vcov", (DL_FUNC) &_PanelMixedDesign_MSM_approx_vcov, 5},
    {"_PanelMixedDesign_PQL_approx_vcov", (DL_FUNC) &_PanelMixedDesign_PQL_approx_vcov, 5},
    {"_PanelMixedDesign_normalize_probabilities", (DL_FUNC) &_PanelMixedDesign_normalize_probabilities, 2},
    {"_PanelMixedDesign_impsamp_calc_info_given_Y", (DL_FUNC) &_PanelMixedDesign_impsamp_calc_info_given_Y, 8},
    {"_PanelMixedDesign_importance_sample_all_Y", (DL_FUNC) &_PanelMixedDesign_importance_sample_all_Y, 6},
    {"_PanelMixedDesign_importance_sample_random_Y", (DL_FUNC) &_PanelMixedDesign_importance_sample_random_Y, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_PanelMixedDesign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
